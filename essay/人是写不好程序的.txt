
我是一名程序员，比较闷骚的那类，虽长相平凡，内心却对自己写程序的能力深以为傲。 刚开始写程序那几年，我曾在深夜反复阅读自己写过的代码，不是检查错误，是欣赏，如同
达芬奇在看定稿的蒙娜丽莎一般。幸好周围的人都不知道我那时的心境，不然恶心反胃的人一定不会少。

又过了几年，程序写得多了，却越来越不敢写程序了，每敲下一个if，都战战兢兢，如履薄冰。你或许认为这是过了“出生牛犊”期的自然反应，仔细想来，还是很有不同。我不是对自己
不自信了，我是对人能写好程序这事儿不再肯定了，或者再偏激一点，人类是写不出好程序的。

想想下棋，我们最多能看明白几步呢？三步我想应该是很厉害了，因为虽然只有三步，确实会指数变化的三步。第一步有两种走法，每种走法对方有两种应对，他的每种应对我又有两种
反制， 这才两步的时候，已经有 2 * 2 * 2 种可能了，三步，每步仅两种情况，就需要照顾64种可能。这已经复杂到人脑不能处理的地步了。再回头想写程序，当写下一个if的时候，就
多一种需要考虑的情况，整个能运行的程序处理的各种可能情况属于万记。更要命的是，这和下棋不同，下棋是在时间轴上线性向前的，而程序中各种情况却是交错的，相互依赖的。
我们会把相似的行为抽象在一个函数(C,FP)或类(OO)里，在这些函数或类里，会在不同场合反复被使用，且你中有我，我中有你的相互调用。

面对这样复杂的情况，人的头脑肯定是不能应付的，也就是人类是不能写出完美的应用程序的，helloworld不算，因为它不能被实际应用，不能benefit anyone。我曾想过借助于unit test，
automation test, 把几乎所有的情况都覆盖到，可现实总很残酷， Windows Vista就采用的是这一般法，结果大家都知道了，几乎没人用Vista。

还有什么办法能写出真正优美的程序呢？ 几乎不可能了，所有领导们都明白这个道理，他们宁愿花钱多找些人来测试，也不愿意靠牛人来提高软件质量，因为人脑面对程序这种复杂的
东东，基本是无解的。

